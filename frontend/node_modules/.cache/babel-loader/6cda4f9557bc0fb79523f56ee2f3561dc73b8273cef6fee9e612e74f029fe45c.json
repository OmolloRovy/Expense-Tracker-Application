{"ast":null,"code":"import { isomorphicAtob } from \"./chunk-TETGTEI2.mjs\";\nimport { isomorphicBtoa } from \"./chunk-KOH7GTJO.mjs\";\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from \"./chunk-X2FYR5U6.mjs\";\n\n// src/keys.ts\nvar PUBLISHABLE_KEY_LIVE_PREFIX = \"pk_live_\";\nvar PUBLISHABLE_KEY_TEST_PREFIX = \"pk_test_\";\nvar PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\nfunction buildPublishableKey(frontendApi) {\n  const isDevKey = PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) || frontendApi.startsWith(\"clerk.\") && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\nfunction parsePublishableKey(key) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  key = key || \"\";\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal) {\n      throw new Error(\"Publishable key not valid.\");\n    }\n    return null;\n  }\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? \"production\" : \"development\";\n  let frontendApi = isomorphicAtob(key.split(\"_\")[2]);\n  frontendApi = frontendApi.slice(0, -1);\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== \"development\" && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n  return {\n    instanceType,\n    frontendApi\n  };\n}\nfunction isPublishableKey(key) {\n  key = key || \"\";\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split(\"_\")[2] || \"\").endsWith(\"$\");\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\nfunction createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = /* @__PURE__ */new Map();\n  return {\n    isDevOrStagingUrl: url => {\n      if (!url) {\n        return false;\n      }\n      const hostname = typeof url === \"string\" ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === void 0) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    }\n  };\n}\nfunction isDevelopmentFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"pk_test_\");\n}\nfunction isProductionFromPublishableKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"pk_live_\");\n}\nfunction isDevelopmentFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\nfunction isProductionFromSecretKey(apiKey) {\n  return apiKey.startsWith(\"live_\") || apiKey.startsWith(\"sk_live_\");\n}\nexport { buildPublishableKey, parsePublishableKey, isPublishableKey, createDevOrStagingUrlCache, isDevelopmentFromPublishableKey, isProductionFromPublishableKey, isDevelopmentFromSecretKey, isProductionFromSecretKey };","map":{"version":3,"mappings":";;;;;AAYA,IAAMA,8BAA8B;AACpC,IAAMC,8BAA8B;AAGpC,IAAMC,qCAAqC;AAEpC,SAASC,oBAAoBC,aAA6B;EAC/D,MAAMC,WACJH,mCAAmCI,KAAKF,WAAW,KAClDA,YAAYG,WAAW,QAAQ,KAAKC,6BAA6BC,KAAKC,KAAKN,YAAYO,SAASD,CAAC,CAAC;EACrG,MAAME,YAAYP,WAAWJ,8BAA8BD;EAC3D,OAAO,GAAGY,SAAS,GAAGC,eAAe,GAAGT,WAAW,GAAG,CAAC;AACzD;AAUO,SAASU,oBACdC,KAEuB;EAAA,IADvBC,8EAAmE,CAAC;EAEpED,MAAMA,OAAO;EAEb,IAAI,CAACA,OAAO,CAACE,iBAAiBF,GAAG,GAAG;IAClC,IAAIC,QAAQE,OAAO;MACjB,MAAM,IAAIC,MAAM,4BAA4B;IAC9C;IACA,OAAO;EACT;EAEA,MAAMC,eAAeL,IAAIR,WAAWP,2BAA2B,IAAI,eAAe;EAElF,IAAII,cAAciB,eAAeN,IAAIO,MAAM,GAAG,EAAE,CAAC,CAAC;EAGlDlB,cAAcA,YAAYmB,MAAM,GAAG,EAAE;EAErC,IAAIP,QAAQQ,UAAU;IACpBpB,cAAcY,QAAQQ;EACxB,WAAWJ,iBAAiB,iBAAiBJ,QAAQS,QAAQ;IAC3DrB,cAAc,SAASY,QAAQS,MAAM;EACvC;EAEA,OAAO;IACLL;IACAhB;EACF;AACF;AAEO,SAASa,iBAAiBF,KAAa;EAC5CA,MAAMA,OAAO;EAEb,MAAMW,iBAAiBX,IAAIR,WAAWP,2BAA2B,KAAKe,IAAIR,WAAWN,2BAA2B;EAEhH,MAAM0B,6BAA6BN,eAAeN,IAAIO,MAAM,GAAG,EAAE,CAAC,KAAK,EAAE,EAAEX,SAAS,GAAG;EAEvF,OAAOe,kBAAkBC;AAC3B;AAEO,SAASC,6BAA6B;EAC3C,MAAMC,uBAAuB,mBAAIC,KAAqB;EAEtD,OAAO;IACLC,mBAAoBC,OAA+B;MACjD,IAAI,CAACA,KAAK;QACR,OAAO;MACT;MAEA,MAAMC,WAAW,OAAOD,QAAQ,WAAWA,MAAMA,IAAIC;MACrD,IAAIC,MAAML,qBAAqBM,IAAIF,QAAQ;MAC3C,IAAIC,QAAQ,QAAW;QACrBA,MAAME,wBAAwB3B,KAAKC,KAAKuB,SAAStB,SAASD,CAAC,CAAC;QAC5DmB,qBAAqBQ,IAAIJ,UAAUC,GAAG;MACxC;MACA,OAAOA;IACT;EACF;AACF;AAEO,SAASI,gCAAgCC,QAAyB;EACvE,OAAOA,OAAOhC,WAAW,OAAO,KAAKgC,OAAOhC,WAAW,UAAU;AACnE;AAEO,SAASiC,+BAA+BD,QAAyB;EACtE,OAAOA,OAAOhC,WAAW,OAAO,KAAKgC,OAAOhC,WAAW,UAAU;AACnE;AAEO,SAASkC,2BAA2BF,QAAyB;EAClE,OAAOA,OAAOhC,WAAW,OAAO,KAAKgC,OAAOhC,WAAW,UAAU;AACnE;AAEO,SAASmC,0BAA0BH,QAAyB;EACjE,OAAOA,OAAOhC,WAAW,OAAO,KAAKgC,OAAOhC,WAAW,UAAU;AACnE","names":["PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","PUBLISHABLE_FRONTEND_API_DEV_REGEX","buildPublishableKey","frontendApi","isDevKey","test","startsWith","LEGACY_DEV_INSTANCE_SUFFIXES","some","s","endsWith","keyPrefix","isomorphicBtoa","parsePublishableKey","key","options","isPublishableKey","fatal","Error","instanceType","isomorphicAtob","split","slice","proxyUrl","domain","hasValidPrefix","hasValidFrontendApiPostfix","createDevOrStagingUrlCache","devOrStagingUrlCache","Map","isDevOrStagingUrl","url","hostname","res","get","DEV_OR_STAGING_SUFFIXES","set","isDevelopmentFromPublishableKey","apiKey","isProductionFromPublishableKey","isDevelopmentFromSecretKey","isProductionFromSecretKey"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/keys.ts"],"sourcesContent":["import type { PublishableKey } from '@clerk/types';\n\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isomorphicAtob } from './isomorphicAtob';\nimport { isomorphicBtoa } from './isomorphicBtoa';\n\ntype ParsePublishableKeyOptions = {\n  fatal?: boolean;\n  domain?: string;\n  proxyUrl?: string;\n};\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const isDevKey =\n    PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ||\n    (frontendApi.startsWith('clerk.') && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s)));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: ParsePublishableKeyOptions & { fatal: true },\n): PublishableKey;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options?: ParsePublishableKeyOptions,\n): PublishableKey | null;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: { fatal?: boolean; domain?: string; proxyUrl?: string } = {},\n): PublishableKey | null {\n  key = key || '';\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal) {\n      throw new Error('Publishable key not valid.');\n    }\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  // TODO(@dimkl): validate packages/clerk-js/src/utils/instance.ts\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== 'development' && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\nexport function isPublishableKey(key: string) {\n  key = key || '';\n\n  const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n  const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n  return hasValidPrefix && hasValidFrontendApiPostfix;\n}\n\nexport function createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('pk_test_');\n}\n\nexport function isProductionFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('pk_live_');\n}\n\nexport function isDevelopmentFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}