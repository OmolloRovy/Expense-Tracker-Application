{"ast":null,"code":"// src/error.ts\nfunction isUnauthorizedError(e) {\n  var _a, _b;\n  const status = e == null ? void 0 : e.status;\n  const code = (_b = (_a = e == null ? void 0 : e.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code;\n  return code === \"authentication_invalid\" && status === 401;\n}\nfunction is4xxError(e) {\n  const status = e == null ? void 0 : e.status;\n  return !!status && status >= 400 && status < 500;\n}\nfunction isNetworkError(e) {\n  const message = (`${e.message}${e.name}` || \"\").toLowerCase().replace(/\\s+/g, \"\");\n  return message.includes(\"networkerror\");\n}\nfunction isKnownError(error) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\nfunction isClerkAPIResponseError(err) {\n  return \"clerkError\" in err;\n}\nfunction isClerkRuntimeError(err) {\n  return \"clerkRuntimeError\" in err;\n}\nfunction isMetamaskError(err) {\n  return \"code\" in err && [4001, 32602, 32603].includes(err.code) && \"message\" in err;\n}\nfunction isUserLockedError(err) {\n  var _a, _b;\n  return isClerkAPIResponseError(err) && ((_b = (_a = err.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code) === \"user_locked\";\n}\nfunction isPasswordPwnedError(err) {\n  var _a, _b;\n  return isClerkAPIResponseError(err) && ((_b = (_a = err.errors) == null ? void 0 : _a[0]) == null ? void 0 : _b.code) === \"form_password_pwned\";\n}\nfunction parseErrors() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return data.length > 0 ? data.map(parseError) : [];\n}\nfunction parseError(error) {\n  var _a, _b, _c, _d, _e;\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: (_a = error == null ? void 0 : error.meta) == null ? void 0 : _a.param_name,\n      sessionId: (_b = error == null ? void 0 : error.meta) == null ? void 0 : _b.session_id,\n      emailAddresses: (_c = error == null ? void 0 : error.meta) == null ? void 0 : _c.email_addresses,\n      identifiers: (_d = error == null ? void 0 : error.meta) == null ? void 0 : _d.identifiers,\n      zxcvbn: (_e = error == null ? void 0 : error.meta) == null ? void 0 : _e.zxcvbn\n    }\n  };\n}\nvar ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {\n  constructor(message, _ref) {\n    let {\n      data,\n      status,\n      clerkTraceId\n    } = _ref;\n    super(message);\n    this.toString = () => {\n      let message = `[${this.name}]\nMessage:${this.message}\nStatus:${this.status}\nSerialized errors: ${this.errors.map(e => JSON.stringify(e))}`;\n      if (this.clerkTraceId) {\n        message += `\nClerk Trace ID: ${this.clerkTraceId}`;\n      }\n      return message;\n    };\n    Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n};\nvar ClerkRuntimeError = class _ClerkRuntimeError extends Error {\n  constructor(message, _ref2) {\n    let {\n      code\n    } = _ref2;\n    super(message);\n    /**\n     * Returns a string representation of the error.\n     *\n     * @returns {string} A formatted string with the error name and message.\n     * @memberof ClerkRuntimeError\n     */\n    this.toString = () => {\n      return `[${this.name}]\nMessage:${this.message}`;\n    };\n    Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);\n    this.code = code;\n    this.message = message;\n    this.clerkRuntimeError = true;\n  }\n};\nvar EmailLinkError = class _EmailLinkError extends Error {\n  constructor(code) {\n    super(code);\n    this.code = code;\n    Object.setPrototypeOf(this, _EmailLinkError.prototype);\n  }\n};\nfunction isEmailLinkError(err) {\n  return err instanceof EmailLinkError;\n}\nvar EmailLinkErrorCode = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`\n});\nfunction buildErrorThrower(_ref3) {\n  let {\n    packageName,\n    customMessages\n  } = _ref3;\n  let pkg = packageName;\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages\n  };\n  function buildMessage(rawMessage, replacements) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || \"\").toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n    return `${pkg}: ${msg}`;\n  }\n  return {\n    setPackageName(_ref4) {\n      let {\n        packageName: packageName2\n      } = _ref4;\n      if (typeof packageName2 === \"string\") {\n        pkg = packageName2;\n      }\n      return this;\n    },\n    setMessages(_ref5) {\n      let {\n        customMessages: customMessages2\n      } = _ref5;\n      Object.assign(messages, customMessages2 || {});\n      return this;\n    },\n    throwInvalidPublishableKeyError(params) {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n    throwInvalidProxyUrl(params) {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n    throwMissingPublishableKeyError() {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n    throwMissingSecretKeyError() {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n    throwMissingClerkProviderError(params) {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n    throw(message) {\n      throw new Error(buildMessage(message));\n    }\n  };\n}\nexport { isUnauthorizedError, is4xxError, isNetworkError, isKnownError, isClerkAPIResponseError, isClerkRuntimeError, isMetamaskError, isUserLockedError, isPasswordPwnedError, parseErrors, parseError, ClerkAPIResponseError, ClerkRuntimeError, EmailLinkError, isEmailLinkError, EmailLinkErrorCode, buildErrorThrower };","map":{"version":3,"mappings":";AAEO,SAASA,oBAAoBC,GAAiB;EAFrD;EAGE,MAAMC,SAASD,uBAAGC;EAClB,MAAMC,QAAOC,kCAAGC,WAAH,mBAAY,OAAZ,mBAAgBF;EAC7B,OAAOA,SAAS,4BAA4BD,WAAW;AACzD;AAEO,SAASI,WAAWL,GAAiB;EAC1C,MAAMC,SAASD,uBAAGC;EAClB,OAAO,CAAC,CAACA,UAAUA,UAAU,OAAOA,SAAS;AAC/C;AAEO,SAASK,eAAeN,GAAiB;EAE9C,MAAMO,WAAW,GAAGP,EAAEO,OAAO,GAAGP,EAAEQ,IAAI,MAAM,IAAIC,aAAY,CAAEC,QAAQ,QAAQ,EAAE;EAChF,OAAOH,QAAQI,SAAS,cAAc;AACxC;AAgBO,SAASC,aAAaC,OAAY;EACvC,OAAOC,wBAAwBD,KAAK,KAAKE,gBAAgBF,KAAK,KAAKG,oBAAoBH,KAAK;AAC9F;AAEO,SAASC,wBAAwBG,KAAwC;EAC9E,OAAO,gBAAgBA;AACzB;AAkBO,SAASD,oBAAoBC,KAAoC;EACtE,OAAO,uBAAuBA;AAChC;AAEO,SAASF,gBAAgBE,KAAgC;EAC9D,OAAO,UAAUA,OAAO,CAAC,MAAM,OAAO,KAAK,EAAEN,SAASM,IAAIf,IAAI,KAAK,aAAae;AAClF;AAEO,SAASC,kBAAkBD,KAAU;EAjE5C;EAkEE,OAAOH,wBAAwBG,GAAG,OAAKd,eAAIC,WAAJ,mBAAa,OAAb,mBAAiBF,UAAS;AACnE;AAEO,SAASiB,qBAAqBF,KAAU;EArE/C;EAsEE,OAAOH,wBAAwBG,GAAG,OAAKd,eAAIC,WAAJ,mBAAa,OAAb,mBAAiBF,UAAS;AACnE;AAEO,SAASkB,cAA6D;EAAA,IAAjDC,2EAA4B,EAAC;EACvD,OAAOA,KAAKC,SAAS,IAAID,KAAKE,IAAIC,UAAU,IAAI,EAAC;AACnD;AAEO,SAASA,WAAWX,OAAyC;EA7EpE;EA8EE,OAAO;IACLX,MAAMW,MAAMX;IACZK,SAASM,MAAMN;IACfkB,aAAaZ,MAAMa;IACnBC,MAAM;MACJC,YAAWC,oCAAOF,SAAP,mBAAaG;MACxBC,YAAW5B,oCAAOwB,SAAP,mBAAaK;MACxBC,iBAAgBC,oCAAOP,SAAP,mBAAaQ;MAC7BC,cAAaC,oCAAOV,SAAP,mBAAaS;MAC1BE,SAAQC,oCAAOZ,SAAP,mBAAaW;IACvB;EACF;AACF;AAEO,IAAME,wBAAN,MAAMC,+BAA8BC,MAAM;EAS/CC,YAAYpC,eAA0E;IAAA,IAAzD;MAAEc;MAAMpB;MAAQ2C;IAAa;IACxD,MAAMrC,OAAO;IAWf,KAAOsC,WAAW,MAAM;MACtB,IAAItC,UAAU,IAAI,KAAKC,IAAI;AAAA,UAAc,KAAKD,OAAO;AAAA,SAAY,KAAKN,MAAM;AAAA,qBAAwB,KAAKG,OAAOmB,IAC9GvB,KAAK8C,KAAKC,UAAU/C,CAAC,EACtB;MAED,IAAI,KAAK4C,cAAc;QACrBrC,WAAW;AAAA,kBAAqB,KAAKqC,YAAY;MACnD;MAEA,OAAOrC;IACT;IAnBEyC,OAAOC,eAAe,MAAMR,uBAAsBS,SAAS;IAE3D,KAAKjD,SAASA;IACd,KAAKM,UAAUA;IACf,KAAKqC,eAAeA;IACpB,KAAKO,aAAa;IAClB,KAAK/C,SAASgB,YAAYC,IAAI;EAChC;AAaF;AASO,IAAM+B,oBAAN,MAAMC,2BAA0BX,MAAM;EAmB3CC,YAAYpC,gBAA6C;IAAA,IAA5B;MAAEL;IAAK;IAClC,MAAMK,OAAO;IAef;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOsC,WAAW,MAAM;MACtB,OAAO,IAAI,KAAKrC,IAAI;AAAA,UAAc,KAAKD,OAAO;IAChD;IAfEyC,OAAOC,eAAe,MAAMI,mBAAkBH,SAAS;IAEvD,KAAKhD,OAAOA;IACZ,KAAKK,UAAUA;IACf,KAAK+C,oBAAoB;EAC3B;AAWF;AAEO,IAAMC,iBAAN,MAAMC,wBAAuBd,MAAM;EAGxCC,YAAYzC,MAAc;IACxB,MAAMA,IAAI;IACV,KAAKA,OAAOA;IACZ8C,OAAOC,eAAe,MAAMO,gBAAeN,SAAS;EACtD;AACF;AAEO,SAASO,iBAAiBxC,KAAmC;EAClE,OAAOA,eAAesC;AACxB;AAEO,IAAMG,qBAAqB;EAChCC,SAAS;EACTC,QAAQ;EACRC,gBAAgB;AAClB;AAEA,IAAMC,kBAAkBd,OAAOe,OAAO;EACpCC,6BAA6B;EAC7BC,mCAAmC;EACnCC,mCAAmC;EACnCC,8BAA8B;EAC9BC,sBAAsB;AACxB,CAAC;AA+BM,SAASC,yBAAsF;EAAA,IAApE;IAAEC;IAAaC;EAAe;EAC9D,IAAIC,MAAMF;EAEV,MAAMG,WAAW;IACf,GAAGX;IACH,GAAGS;EACL;EAEA,SAASG,aAAaC,YAAoBC,cAAgD;IACxF,IAAI,CAACA,cAAc;MACjB,OAAO,GAAGJ,GAAG,KAAKG,UAAU;IAC9B;IAEA,IAAIE,MAAMF;IACV,MAAMG,UAAUH,WAAWI,SAAS,uBAAuB;IAE3D,WAAWC,SAASF,SAAS;MAC3B,MAAMG,eAAeL,aAAaI,MAAM,CAAC,CAAC,KAAK,IAAInC,UAAS;MAC5DgC,MAAMA,IAAInE,QAAQ,KAAKsE,MAAM,CAAC,CAAC,MAAMC,WAAW;IAClD;IAEA,OAAO,GAAGT,GAAG,KAAKK,GAAG;EACvB;EAEA,OAAO;IACLK,sBAAmE;MAAA,IAApD;QAAEZ;MAAY;MAC3B,IAAI,OAAOA,iBAAgB,UAAU;QACnCE,MAAMF;MACR;MACA,OAAO;IACT;IAEAa,mBAAmE;MAAA,IAAvD;QAAEZ;MAAe;MAC3BvB,OAAOoC,OAAOX,UAAUF,mBAAkB,CAAC,CAAC;MAC5C,OAAO;IACT;IAEAc,gCAAgCC,QAAiC;MAC/D,MAAM,IAAI5C,MAAMgC,aAAaD,SAASR,mCAAmCqB,MAAM,CAAC;IAClF;IAEAC,qBAAqBD,QAAiC;MACpD,MAAM,IAAI5C,MAAMgC,aAAaD,SAAST,6BAA6BsB,MAAM,CAAC;IAC5E;IAEAE,kCAAyC;MACvC,MAAM,IAAI9C,MAAMgC,aAAaD,SAASP,iCAAiC,CAAC;IAC1E;IAEAuB,6BAAoC;MAClC,MAAM,IAAI/C,MAAMgC,aAAaD,SAASN,4BAA4B,CAAC;IACrE;IAEAuB,+BAA+BJ,QAAoC;MACjE,MAAM,IAAI5C,MAAMgC,aAAaD,SAASL,sBAAsBkB,MAAM,CAAC;IACrE;IAEAK,MAAMpF,SAAwB;MAC5B,MAAM,IAAImC,MAAMgC,aAAanE,OAAO,CAAC;IACvC;EACF;AACF","names":["isUnauthorizedError","e","status","code","_b","errors","is4xxError","isNetworkError","message","name","toLowerCase","replace","includes","isKnownError","error","isClerkAPIResponseError","isMetamaskError","isClerkRuntimeError","err","isUserLockedError","isPasswordPwnedError","parseErrors","data","length","map","parseError","longMessage","long_message","meta","paramName","_a","param_name","sessionId","session_id","emailAddresses","_c","email_addresses","identifiers","_d","zxcvbn","_e","ClerkAPIResponseError","_ClerkAPIResponseError","Error","constructor","clerkTraceId","toString","JSON","stringify","Object","setPrototypeOf","prototype","clerkError","ClerkRuntimeError","_ClerkRuntimeError","clerkRuntimeError","EmailLinkError","_EmailLinkError","isEmailLinkError","EmailLinkErrorCode","Expired","Failed","ClientMismatch","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","buildErrorThrower","packageName","customMessages","pkg","messages","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","setPackageName","setMessages","assign","throwInvalidPublishableKeyError","params","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/error.ts"],"sourcesContent":["import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = message;\n    this.clerkRuntimeError = true;\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   * @memberof ClerkRuntimeError\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err instanceof EmailLinkError;\n}\n\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}