{"ast":null,"code":"// src/file.ts\nfunction readJSONFile(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", function () {\n      const result = JSON.parse(reader.result);\n      resolve(result);\n    });\n    reader.addEventListener(\"error\", reject);\n    reader.readAsText(file);\n  });\n}\nvar MimeTypeToExtensionMap = Object.freeze({\n  \"image/png\": \"png\",\n  \"image/jpeg\": \"jpg\",\n  \"image/gif\": \"gif\",\n  \"image/webp\": \"webp\",\n  \"image/x-icon\": \"ico\",\n  \"image/vnd.microsoft.icon\": \"ico\"\n});\nvar extension = mimeType => {\n  return MimeTypeToExtensionMap[mimeType];\n};\nexport { readJSONFile, extension };","map":{"version":3,"mappings":";AAMO,SAASA,aAAaC,MAA8B;EACzD,OAAO,IAAIC,QAAQ,CAACC,SAASC,WAAW;IACtC,MAAMC,SAAS,IAAIC,YAAW;IAC9BD,OAAOE,iBAAiB,QAAQ,YAAY;MAC1C,MAAMC,SAASC,KAAKC,MAAML,OAAOG,MAAgB;MACjDL,QAAQK,MAAM;IAChB,CAAC;IAEDH,OAAOE,iBAAiB,SAASH,MAAM;IACvCC,OAAOM,WAAWV,IAAI;EACxB,CAAC;AACH;AAEA,IAAMW,yBAAyBC,OAAOC,OAAO;EAC3C,aAAa;EACb,cAAc;EACd,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,4BAA4B;AAC9B,CAAU;AAIH,IAAMC,YAAaC,YAAwC;EAChE,OAAOJ,uBAAuBI,QAAQ;AACxC","names":["readJSONFile","file","Promise","resolve","reject","reader","FileReader","addEventListener","result","JSON","parse","readAsText","MimeTypeToExtensionMap","Object","freeze","extension","mimeType"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/file.ts"],"sourcesContent":["/**\n * Read an expected JSON type File.\n *\n * Probably paired with:\n *  <input type='file' accept='application/JSON' ... />\n */\nexport function readJSONFile(file: File): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      const result = JSON.parse(reader.result as string);\n      resolve(result);\n    });\n\n    reader.addEventListener('error', reject);\n    reader.readAsText(file);\n  });\n}\n\nconst MimeTypeToExtensionMap = Object.freeze({\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/gif': 'gif',\n  'image/webp': 'webp',\n  'image/x-icon': 'ico',\n  'image/vnd.microsoft.icon': 'ico',\n} as const);\n\nexport type SupportedMimeType = keyof typeof MimeTypeToExtensionMap;\n\nexport const extension = (mimeType: SupportedMimeType): string => {\n  return MimeTypeToExtensionMap[mimeType];\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}