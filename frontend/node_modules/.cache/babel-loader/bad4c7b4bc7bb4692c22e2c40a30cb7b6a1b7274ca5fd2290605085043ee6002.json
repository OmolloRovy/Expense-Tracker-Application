{"ast":null,"code":"// src/utils/noop.ts\nvar noop = function () {};\n\n// src/workerTimers/workerTimers.worker.ts\nvar workerTimers_worker_default = 'const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener(\"message\",r=>{const e=r.data;switch(e.type){case\"setTimeout\":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id})},e.ms);break;case\"clearTimeout\":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case\"setInterval\":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case\"clearInterval\":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\\n';\n\n// src/workerTimers/createWorkerTimers.ts\nvar createWebWorker = function (source) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof Worker === \"undefined\") {\n    return null;\n  }\n  try {\n    const blob = new Blob([source], {\n      type: \"application/javascript; charset=utf-8\"\n    });\n    const workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn(\"Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP\");\n    return null;\n  }\n};\nvar fallbackTimers = () => {\n  const setTimeout = globalThis.setTimeout.bind(globalThis);\n  const setInterval = globalThis.setInterval.bind(globalThis);\n  const clearTimeout = globalThis.clearTimeout.bind(globalThis);\n  const clearInterval = globalThis.clearInterval.bind(globalThis);\n  return {\n    setTimeout,\n    setInterval,\n    clearTimeout,\n    clearInterval,\n    cleanup: noop\n  };\n};\nvar createWorkerTimers = () => {\n  let id = 0;\n  const generateId = () => id++;\n  const callbacks = /* @__PURE__ */new Map();\n  const post = (w, p) => w == null ? void 0 : w.postMessage(p);\n  const handleMessage = e => {\n    var _a;\n    (_a = callbacks.get(e.data.id)) == null ? void 0 : _a();\n  };\n  let worker = createWebWorker(workerTimers_worker_default, {\n    name: \"clerk-timers\"\n  });\n  worker == null ? void 0 : worker.addEventListener(\"message\", handleMessage);\n  if (!worker) {\n    return fallbackTimers();\n  }\n  const init = () => {\n    if (!worker) {\n      worker = createWebWorker(workerTimers_worker_default, {\n        name: \"clerk-timers\"\n      });\n      worker == null ? void 0 : worker.addEventListener(\"message\", handleMessage);\n    }\n  };\n  const cleanup = () => {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n  const setTimeout = (cb, ms) => {\n    init();\n    const id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setTimeout\",\n      id: id2,\n      ms\n    });\n    return id2;\n  };\n  const setInterval = (cb, ms) => {\n    init();\n    const id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setInterval\",\n      id: id2,\n      ms\n    });\n    return id2;\n  };\n  const clearTimeout = id2 => {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearTimeout\",\n      id: id2\n    });\n  };\n  const clearInterval = id2 => {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearInterval\",\n      id: id2\n    });\n  };\n  return {\n    setTimeout,\n    setInterval,\n    clearTimeout,\n    clearInterval,\n    cleanup\n  };\n};\n\n// src/poller.ts\nfunction Poller() {\n  let {\n    delayInMs\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    delayInMs: 1e3\n  };\n  const workerTimers = createWorkerTimers();\n  let timerId;\n  let stopped = false;\n  const stop = () => {\n    if (timerId) {\n      workerTimers.clearTimeout(timerId);\n      workerTimers.cleanup();\n    }\n    stopped = true;\n  };\n  const run = async cb => {\n    stopped = false;\n    await cb(stop);\n    if (stopped) {\n      return;\n    }\n    timerId = workerTimers.setTimeout(() => {\n      void run(cb);\n    }, delayInMs);\n  };\n  return {\n    run,\n    stop\n  };\n}\nexport { noop, createWorkerTimers, Poller };","map":{"version":3,"mappings":"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","names":["noop","createWebWorker","source","opts","Worker","blob","Blob","type","workerScript","globalThis","URL","createObjectURL","e","console","warn","fallbackTimers","setTimeout","bind","setInterval","clearTimeout","clearInterval","cleanup","createWorkerTimers","id","generateId","callbacks","Map","post","w","p","postMessage","handleMessage","get","data","worker","workerTimers_worker_default","name","addEventListener","init","terminate","clear","cb","ms","set","delete","Poller","delayInMs","workerTimers","timerId","stopped","stop","run"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/utils/noop.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/workerTimers/workerTimers.worker.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/workerTimers/createWorkerTimers.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/poller.ts"],"sourcesContent":["export const noop = (..._args: any[]): void => {\n  // do nothing.\n};\n","const respond=r=>{self.postMessage(r)},workerToTabIds={};self.addEventListener(\"message\",r=>{const e=r.data;switch(e.type){case\"setTimeout\":workerToTabIds[e.id]=setTimeout(()=>{respond({id:e.id})},e.ms);break;case\"clearTimeout\":workerToTabIds[e.id]&&(clearTimeout(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break;case\"setInterval\":workerToTabIds[e.id]=setInterval(()=>{respond({id:e.id})},e.ms);break;case\"clearInterval\":workerToTabIds[e.id]&&(clearInterval(workerToTabIds[e.id]),delete workerToTabIds[e.id]);break}});\n","import { noop } from '../utils/noop';\nimport type {\n  WorkerClearTimeout,\n  WorkerSetTimeout,\n  WorkerTimeoutCallback,\n  WorkerTimerEvent,\n  WorkerTimerId,\n  WorkerTimerResponseEvent,\n} from './workerTimers.types';\n// @ts-ignore\nimport pollerWorkerSource from './workerTimers.worker';\n\nconst createWebWorker = (source: string, opts: ConstructorParameters<typeof Worker>[1] = {}): Worker | null => {\n  if (typeof Worker === 'undefined') {\n    return null;\n  }\n\n  try {\n    const blob = new Blob([source], { type: 'application/javascript; charset=utf-8' });\n    const workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn('Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP');\n    return null;\n  }\n};\n\nconst fallbackTimers = () => {\n  const setTimeout = globalThis.setTimeout.bind(globalThis) as WorkerSetTimeout;\n  const setInterval = globalThis.setInterval.bind(globalThis) as WorkerSetTimeout;\n  const clearTimeout = globalThis.clearTimeout.bind(globalThis) as WorkerClearTimeout;\n  const clearInterval = globalThis.clearInterval.bind(globalThis) as WorkerClearTimeout;\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup: noop };\n};\n\nexport const createWorkerTimers = () => {\n  let id = 0;\n  const generateId = () => id++;\n  const callbacks = new Map<WorkerTimerId, WorkerTimeoutCallback>();\n  const post = (w: Worker | null, p: WorkerTimerEvent) => w?.postMessage(p);\n  const handleMessage = (e: MessageEvent<WorkerTimerResponseEvent>) => {\n    callbacks.get(e.data.id)?.();\n  };\n\n  let worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n  worker?.addEventListener('message', handleMessage);\n\n  if (!worker) {\n    return fallbackTimers();\n  }\n\n  const init = () => {\n    if (!worker) {\n      worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n      worker?.addEventListener('message', handleMessage);\n    }\n  };\n\n  const cleanup = () => {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n\n  const setTimeout: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setTimeout', id, ms });\n    return id;\n  };\n\n  const setInterval: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setInterval', id, ms });\n    return id;\n  };\n\n  const clearTimeout: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearTimeout', id });\n  };\n\n  const clearInterval: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearInterval', id });\n  };\n\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup };\n};\n","import { createWorkerTimers } from './workerTimers';\n\nexport type PollerStop = () => void;\nexport type PollerCallback = (stop: PollerStop) => Promise<unknown>;\nexport type PollerRun = (cb: PollerCallback) => Promise<void>;\n\ntype PollerOptions = {\n  delayInMs: number;\n};\n\nexport type Poller = {\n  run: PollerRun;\n  stop: PollerStop;\n};\n\nexport function Poller({ delayInMs }: PollerOptions = { delayInMs: 1000 }): Poller {\n  const workerTimers = createWorkerTimers();\n\n  let timerId: number | undefined;\n  let stopped = false;\n\n  const stop: PollerStop = () => {\n    if (timerId) {\n      workerTimers.clearTimeout(timerId);\n      workerTimers.cleanup();\n    }\n    stopped = true;\n  };\n\n  const run: PollerRun = async cb => {\n    stopped = false;\n    await cb(stop);\n    if (stopped) {\n      return;\n    }\n\n    timerId = workerTimers.setTimeout(() => {\n      void run(cb);\n    }, delayInMs) as any as number;\n  };\n\n  return { run, stop };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}