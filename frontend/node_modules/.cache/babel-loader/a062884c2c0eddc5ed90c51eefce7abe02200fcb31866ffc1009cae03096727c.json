{"ast":null,"code":"// src/devBrowser.ts\nvar DEV_BROWSER_JWT_KEY = \"__clerk_db_jwt\";\nvar DEV_BROWSER_JWT_HEADER = \"Clerk-Db-Jwt\";\nfunction setDevBrowserJWTInURL(url, jwt) {\n  const resultURL = new URL(url);\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  const jwtToSet = jwtFromSearch || jwt;\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n  return resultURL;\n}\nfunction extractDevBrowserJWTFromURL(url) {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== \"undefined\") {\n    globalThis.history.replaceState(null, \"\", removeDevBrowserJwt(url));\n  }\n  return jwt;\n}\nvar readDevBrowserJwtFromSearchParams = url => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || \"\";\n};\nvar removeDevBrowserJwt = url => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\nvar removeDevBrowserJwtFromURLSearchParams = _url => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\nvar removeLegacyDevBrowserJwt = _url => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = \"__dev_session\";\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, \"\");\n  if (url.href.endsWith(\"#\")) {\n    url.hash = \"\";\n  }\n  return url;\n};\nexport { DEV_BROWSER_JWT_KEY, DEV_BROWSER_JWT_HEADER, setDevBrowserJWTInURL, extractDevBrowserJWTFromURL };","map":{"version":3,"mappings":";AAAO,IAAMA,sBAAsB;AAC5B,IAAMC,yBAAyB;AAG/B,SAASC,sBAAsBC,KAAUC,KAAkB;EAChE,MAAMC,YAAY,IAAIC,IAAIH,GAAG;EAG7B,MAAMI,gBAAgBF,UAAUG,aAAaC,IAAIT,mBAAmB;EACpEK,UAAUG,aAAaE,OAAOV,mBAAmB;EAGjD,MAAMW,WAAWJ,iBAAiBH;EAElC,IAAIO,UAAU;IACZN,UAAUG,aAAaI,IAAIZ,qBAAqBW,QAAQ;EAC1D;EAEA,OAAON;AACT;AAOO,SAASQ,4BAA4BV,KAAkB;EAC5D,MAAMC,MAAMU,kCAAkCX,GAAG;EACjD,MAAMY,WAAWC,oBAAoBb,GAAG;EACxC,IAAIY,SAASE,SAASd,IAAIc,QAAQ,OAAOC,WAAWC,YAAY,aAAa;IAC3ED,WAAWC,QAAQC,aAAa,MAAM,IAAIJ,oBAAoBb,GAAG,CAAC;EACpE;EACA,OAAOC;AACT;AAEA,IAAMU,oCAAqCX,OAAa;EACtD,OAAOA,IAAIK,aAAaC,IAAIT,mBAAmB,KAAK;AACtD;AAEA,IAAMgB,sBAAuBb,OAAa;EACxC,OAAOkB,uCAAuCC,0BAA0BnB,GAAG,CAAC;AAC9E;AAEA,IAAMkB,yCAA0CE,QAAc;EAC5D,MAAMpB,MAAM,IAAIG,IAAIiB,IAAI;EACxBpB,IAAIK,aAAaE,OAAOV,mBAAmB;EAC3C,OAAOG;AACT;AAaA,IAAMmB,4BAA6BC,QAAc;EAC/C,MAAMC,gCAAgC;EACtC,MAAMC,6BAA6B;EACnC,MAAMtB,MAAM,IAAIG,IAAIiB,IAAI;EACxBpB,IAAIK,aAAaE,OAAOe,0BAA0B;EAClDtB,IAAIuB,OAAOC,UAAUxB,IAAIuB,IAAI,EAAEE,QAAQJ,+BAA+B,EAAE;EACxE,IAAIrB,IAAIc,KAAKY,SAAS,GAAG,GAAG;IAC1B1B,IAAIuB,OAAO;EACb;EACA,OAAOvB;AACT","names":["DEV_BROWSER_JWT_KEY","DEV_BROWSER_JWT_HEADER","setDevBrowserJWTInURL","url","jwt","resultURL","URL","jwtFromSearch","searchParams","get","delete","jwtToSet","set","extractDevBrowserJWTFromURL","readDevBrowserJwtFromSearchParams","cleanUrl","removeDevBrowserJwt","href","globalThis","history","replaceState","removeDevBrowserJwtFromURLSearchParams","removeLegacyDevBrowserJwt","_url","DEV_BROWSER_JWT_MARKER_REGEXP","DEV_BROWSER_JWT_LEGACY_KEY","hash","decodeURI","replace","endsWith"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/devBrowser.ts"],"sourcesContent":["export const DEV_BROWSER_JWT_KEY = '__clerk_db_jwt';\nexport const DEV_BROWSER_JWT_HEADER = 'Clerk-Db-Jwt';\n\n// Sets the dev_browser JWT in the hash or the search\nexport function setDevBrowserJWTInURL(url: URL, jwt: string): URL {\n  const resultURL = new URL(url);\n\n  // extract & strip existing jwt from search\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n\n  // Existing jwt takes precedence\n  const jwtToSet = jwtFromSearch || jwt;\n\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n\n  return resultURL;\n}\n\n/**\n * Gets the __clerk_db_jwt JWT from either the hash or the search\n * Side effect:\n * Removes __clerk_db_jwt JWT from the URL (hash and searchParams) and updates the browser history\n */\nexport function extractDevBrowserJWTFromURL(url: URL): string {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== 'undefined') {\n    globalThis.history.replaceState(null, '', removeDevBrowserJwt(url));\n  }\n  return jwt;\n}\n\nconst readDevBrowserJwtFromSearchParams = (url: URL) => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || '';\n};\n\nconst removeDevBrowserJwt = (url: URL) => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\n\nconst removeDevBrowserJwtFromURLSearchParams = (_url: URL) => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\n\n/**\n * Removes the __clerk_db_jwt JWT from the URL hash, as well as\n * the legacy __dev_session JWT from the URL searchParams\n * We no longer need to use this value, however, we should remove it from the URL\n * Existing v4 apps will write the JWT to the hash and the search params in order to ensure\n * backwards compatibility with older v4 apps.\n * The only use case where this is needed now is when a user upgrades to clerk@5 locally\n * without changing the component's version on their dashboard.\n * In this scenario, the AP@4 -> localhost@5 redirect will still have the JWT in the hash,\n * in which case we need to remove it.\n */\nconst removeLegacyDevBrowserJwt = (_url: URL) => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = '__dev_session';\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, '');\n  if (url.href.endsWith('#')) {\n    url.hash = '';\n  }\n  return url;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}