{"ast":null,"code":"import { eventMethodCalled } from \"../chunk-TUVJ3GI6.mjs\";\nimport { __export, __reExport } from \"../chunk-UVVCWSVF.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return ctx.value;\n  };\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  SWRConfig: () => SWRConfig,\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2, SWRConfig } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = _ref => {\n  let {\n    children,\n    organization,\n    swrConfig\n  } = _ref;\n  return /* @__PURE__ */React2.createElement(SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization\n      }\n    }\n  }, children));\n};\nfunction useAssertWrappedByClerkProvider(displayNameOrFn) {\n  const ctx = React2.useContext(ClerkInstanceContext);\n  if (!ctx) {\n    if (typeof displayNameOrFn === \"function\") {\n      displayNameOrFn();\n      return;\n    }\n    throw new Error(`${displayNameOrFn} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`);\n  }\n}\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues) => {\n  var _a, _b, _c;\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : (_a = params == null ? void 0 : params.initialPage) != null ? _a : defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (_b = params == null ? void 0 : params.pageSize) != null ? _b : defaultValues.pageSize);\n  const newObj = {};\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (_c = params == null ? void 0 : params[key]) != null ? _c : defaultValues[key];\n  }\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  };\n};\nvar cachingSWROptions = {\n  dedupingInterval: 1e3 * 60,\n  focusThrottleInterval: 1e3 * 60 * 2\n};\nvar usePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  var _a, _b, _c, _d, _e, _f, _g;\n  const [paginatedPage, setPaginatedPage] = useState((_a = params.initialPage) != null ? _a : 1);\n  const initialPageRef = useRef((_b = params.initialPage) != null ? _b : 1);\n  const pageSizeRef = useRef((_c = params.pageSize) != null ? _c : 10);\n  const enabled = (_d = config.enabled) != null ? _d : true;\n  const triggerInfinite = (_e = config.infinite) != null ? _e : false;\n  const keepPreviousData = (_f = config.keepPreviousData) != null ? _f : false;\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  };\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, {\n    keepPreviousData,\n    ...cachingSWROptions\n  });\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n    return {\n      ...params,\n      ...cacheKeys,\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    };\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, cachingSWROptions);\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    var _a2, _b2;\n    if (triggerInfinite) {\n      return (_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData.map(a => a == null ? void 0 : a.data).flat()) != null ? _a2 : [];\n    }\n    return (_b2 = swrData == null ? void 0 : swrData.data) != null ? _b2 : [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    var _a2, _b2;\n    if (triggerInfinite) {\n      return ((_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData[(swrInfiniteData == null ? void 0 : swrInfiniteData.length) - 1]) == null ? void 0 : _a2.total_count) || 0;\n    }\n    return (_b2 = swrData == null ? void 0 : swrData.total_count) != null ? _b2 : 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (_g = triggerInfinite ? swrInfiniteError : swrError) != null ? _g : null;\n  const isError = !!error;\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganization = params => {\n  var _a;\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganization\");\n  const {\n    organization\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganization\"));\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const domains = usePagesOrInfinite({\n    ...domainParams\n  }, organization == null ? void 0 : organization.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const membershipRequests = usePagesOrInfinite({\n    ...membershipRequestParams\n  }, organization == null ? void 0 : organization.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const memberships = usePagesOrInfinite(membersParams || {}, organization == null ? void 0 : organization.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...invitationsParams\n  }, organization == null ? void 0 : organization.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations\n  };\n};\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(organizationMembership => organizationMembership.organization.id === activeOrganizationId);\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganizationList = params => {\n  var _a;\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganizationList\");\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganizationList\"));\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite(userMembershipsParams || {}, user == null ? void 0 : user.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user == null ? void 0 : user.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...userInvitationsParams\n  }, user == null ? void 0 : user.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user == null ? void 0 : user.id\n  });\n  const suggestions = usePagesOrInfinite({\n    ...userSuggestionsParams\n  }, user == null ? void 0 : user.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user == null ? void 0 : user.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n};\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\n\n// src/react/hooks/useSession.ts\nvar useSession = () => {\n  useAssertWrappedByClerkProvider(\"useSession\");\n  const session = useSessionContext();\n  if (session === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      session: void 0\n    };\n  }\n  if (session === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    session\n  };\n};\n\n// src/react/hooks/useSessionList.ts\nvar useSessionList = () => {\n  useAssertWrappedByClerkProvider(\"useSessionList\");\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n  if (!client) {\n    return {\n      isLoaded: false,\n      sessions: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/react/hooks/useUser.ts\nfunction useUser() {\n  useAssertWrappedByClerkProvider(\"useUser\");\n  const user = useUserContext();\n  if (user === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      user: void 0\n    };\n  }\n  if (user === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      user: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user\n  };\n}\n\n// src/react/hooks/useClerk.ts\nvar useClerk = () => {\n  useAssertWrappedByClerkProvider(\"useClerk\");\n  return useClerkInstanceContext();\n};\n\n// ../../node_modules/dequal/dist/index.mjs\nvar has = Object.prototype.hasOwnProperty;\nfunction find(iter, tar, key) {\n  for (key of iter.keys()) {\n    if (dequal(key, tar)) return key;\n  }\n}\nfunction dequal(foo, bar) {\n  var ctor, len, tmp;\n  if (foo === bar) return true;\n  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n    if (ctor === Date) return foo.getTime() === bar.getTime();\n    if (ctor === RegExp) return foo.toString() === bar.toString();\n    if (ctor === Array) {\n      if ((len = foo.length) === bar.length) {\n        while (len-- && dequal(foo[len], bar[len]));\n      }\n      return len === -1;\n    }\n    if (ctor === Set) {\n      if (foo.size !== bar.size) {\n        return false;\n      }\n      for (len of foo) {\n        tmp = len;\n        if (tmp && typeof tmp === \"object\") {\n          tmp = find(bar, tmp);\n          if (!tmp) return false;\n        }\n        if (!bar.has(tmp)) return false;\n      }\n      return true;\n    }\n    if (ctor === Map) {\n      if (foo.size !== bar.size) {\n        return false;\n      }\n      for (len of foo) {\n        tmp = len[0];\n        if (tmp && typeof tmp === \"object\") {\n          tmp = find(bar, tmp);\n          if (!tmp) return false;\n        }\n        if (!dequal(len[1], bar.get(tmp))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (ctor === ArrayBuffer) {\n      foo = new Uint8Array(foo);\n      bar = new Uint8Array(bar);\n    } else if (ctor === DataView) {\n      if ((len = foo.byteLength) === bar.byteLength) {\n        while (len-- && foo.getInt8(len) === bar.getInt8(len));\n      }\n      return len === -1;\n    }\n    if (ArrayBuffer.isView(foo)) {\n      if ((len = foo.byteLength) === bar.byteLength) {\n        while (len-- && foo[len] === bar[len]);\n      }\n      return len === -1;\n    }\n    if (!ctor || typeof foo === \"object\") {\n      len = 0;\n      for (ctor in foo) {\n        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n      }\n      return Object.keys(bar).length === len;\n    }\n  }\n  return foo !== foo && bar !== bar;\n}\n\n// src/react/hooks/useDeepEqualMemo.ts\nimport React4 from \"react\";\nvar useDeepEqualMemoize = value => {\n  const ref = React4.useRef(value);\n  if (!dequal(value, ref.current)) {\n    ref.current = value;\n  }\n  return React4.useMemo(() => ref.current, [ref.current]);\n};\nvar useDeepEqualMemo = (factory, dependencyArray) => {\n  return React4.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\nvar isDeeplyEqual = dequal;\nexport { ClerkInstanceContext, ClientContext, OrganizationProvider, SessionContext, UserContext, assertContextExists, createContextAndHook, isDeeplyEqual, useAssertWrappedByClerkProvider, useClerk, useClerkInstanceContext, useClientContext, useDeepEqualMemo, useOrganization, useOrganizationContext, useOrganizationList, useSafeLayoutEffect, useSession, useSessionContext, useSessionList, useUser, useUserContext };","map":{"version":3,"mappings":"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","names":["React","assertContextExists","contextVal","msgOrCtx","Error","displayName","createContextAndHook","options","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","__export","SWRConfig","useSWR","useSWRInfinite","__reExport","default","ClerkInstanceContext","useClerkInstanceContext","UserContext","useUserContext","ClientContext","useClientContext","SessionContext","useSessionContext","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","children","organization","swrConfig","Provider","useAssertWrappedByClerkProvider","displayNameOrFn","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","initialPage","_a","pageSizeRef","pageSize","_b","newObj","key","_c","current","cachingSWROptions","dedupingInterval","focusThrottleInterval","usePagesOrInfinite","fetcher","config","cacheKeys","paginatedPage","setPaginatedPage","enabled","_d","triggerInfinite","_e","infinite","keepPreviousData","_f","pagesCacheKey","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","cacheKeyParams","requestParams","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","fetchPage","numberOrgFn","map","a","flat","count","length","total_count","isFetching","_g","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","invitationsSafeValues","clerk","telemetry","record","eventMethodCalled","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","getMemberships","getInvitations","isLoaded","membership","loaded","getCurrentOrganizationMembership","user","organizationMemberships","activeOrganizationId","find","organizationMembership","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","createOrganization","setActive","useSafeLayoutEffect","window","useLayoutEffect","useEffect","useSession","isSignedIn","useSessionList","isomorphicClerk","client","sessions","useUser","useClerk","prototype","hasOwnProperty","iter","tar","dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","toString","Array","Map","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","call","useDeepEqualMemoize","ref","useDeepEqualMemo","factory","dependencyArray","isDeeplyEqual"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/createContextAndHook.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/contexts.tsx","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/clerk-swr.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/usePagesOrInfinite.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useOrganization.tsx","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useOrganizationList.tsx","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useSafeLayoutEffect.tsx","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useSession.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useSessionList.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useUser.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useClerk.ts","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/node_modules/dequal/dist/index.mjs","/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/react/hooks/useDeepEqualMemo.ts"],"sourcesContent":["'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClientResource,\n  LoadedClerk,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: { organization },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\nfunction useAssertWrappedByClerkProvider(displayNameOrFn: string | (() => void)): void {\n  const ctx = React.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === 'function') {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(\n      `${displayNameOrFn} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n    );\n  }\n}\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n  useAssertWrappedByClerkProvider,\n};\n","'use client';\n// eslint-disable-next-line import/export\nexport * from 'swr';\n// eslint-disable-next-line import/export\nexport { default as useSWR, SWRConfig } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type {\n  CacheSetter,\n  PagesOrInfiniteConfig,\n  PagesOrInfiniteOptions,\n  PaginatedResources,\n  ValueOrSetter,\n} from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage,\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\nconst cachingSWROptions = {\n  dedupingInterval: 1000 * 60,\n  focusThrottleInterval: 1000 * 60 * 2,\n} satisfies Parameters<typeof useSWR>[2];\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TConfig extends PagesOrInfiniteConfig = PagesOrInfiniteConfig,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  config: TConfig,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TConfig['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = config.enabled ?? true;\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData, ...cachingSWROptions },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    cachingSWROptions,\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembersParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useSessionContext,\n} from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  domains?: true | PaginatedHookConfig<GetDomainsParams>;\n  membershipRequests?: true | PaginatedHookConfig<GetMembershipRequestParams>;\n  memberships?: true | PaginatedHookConfig<GetMembersParams>;\n  invitations?: true | PaginatedHookConfig<GetInvitationsParams>;\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      organization: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganization');\n\n  const { organization } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganization'));\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    membersParams || {},\n    organization?.getMemberships,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  userMemberships?: true | PaginatedHookConfig<GetUserOrganizationMembershipParams>;\n  userInvitations?: true | PaginatedHookConfig<GetUserOrganizationInvitationsParams>;\n  userSuggestions?: true | PaginatedHookConfig<GetUserOrganizationSuggestionsParams>;\n};\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      createOrganization: undefined;\n      setActive: undefined;\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganizationList');\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganizationList'));\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    userMembershipsParams || {},\n    user?.getOrganizationMemberships,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","import type { ActiveSessionResource } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useSessionContext } from '../contexts';\n\ntype UseSessionReturn =\n  | { isLoaded: false; isSignedIn: undefined; session: undefined }\n  | { isLoaded: true; isSignedIn: false; session: null }\n  | { isLoaded: true; isSignedIn: true; session: ActiveSessionResource };\n\ntype UseSession = () => UseSessionReturn;\n\n/**\n * Returns the current auth state and if a session exists, the session object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `session`.\n *\n * @example\n * A simple example:\n *\n * import { useSession } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>{session.updatedAt}</div>\n * }\n */\nexport const useSession: UseSession = () => {\n  useAssertWrappedByClerkProvider('useSession');\n\n  const session = useSessionContext();\n\n  if (session === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, session: undefined };\n  }\n\n  if (session === null) {\n    return { isLoaded: true, isSignedIn: false, session: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, session };\n};\n","import type { SessionResource, SetActive } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useClientContext } from '../contexts';\n\ntype UseSessionListReturn =\n  | {\n      isLoaded: false;\n      sessions: undefined;\n      setActive: undefined;\n    }\n  | {\n      isLoaded: true;\n      sessions: SessionResource[];\n      setActive: SetActive;\n    };\n\ntype UseSessionList = () => UseSessionListReturn;\n\nexport const useSessionList: UseSessionList = () => {\n  useAssertWrappedByClerkProvider('useSessionList');\n\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n\n  if (!client) {\n    return { isLoaded: false, sessions: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import type { UserResource } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useUserContext } from '../contexts';\n\ntype UseUserReturn =\n  | { isLoaded: false; isSignedIn: undefined; user: undefined }\n  | { isLoaded: true; isSignedIn: false; user: null }\n  | { isLoaded: true; isSignedIn: true; user: UserResource };\n\n/**\n * Returns the current auth state and if a user is signed in, the user object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `user`.\n *\n * @example\n * A simple example:\n *\n * import { useUser } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, user } = useUser();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>Hello, {user.firstName}</div>\n * }\n */\nexport function useUser(): UseUserReturn {\n  useAssertWrappedByClerkProvider('useUser');\n\n  const user = useUserContext();\n\n  if (user === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, user: undefined };\n  }\n\n  if (user === null) {\n    return { isLoaded: true, isSignedIn: false, user: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, user };\n}\n","import type { LoadedClerk } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext } from '../contexts';\n\nexport const useClerk = (): LoadedClerk => {\n  useAssertWrappedByClerkProvider('useClerk');\n  return useClerkInstanceContext();\n};\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { dequal as deepEqual } from 'dequal';\nimport React from 'react';\n\ntype UseMemoFactory<T> = () => T;\ntype UseMemoDependencyArray = Exclude<Parameters<typeof React.useMemo>[1], 'undefined'>;\ntype UseDeepEqualMemo = <T>(factory: UseMemoFactory<T>, dependencyArray: UseMemoDependencyArray) => T;\n\nconst useDeepEqualMemoize = <T>(value: T) => {\n  const ref = React.useRef<T>(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React.useMemo(() => ref.current, [ref.current]);\n};\n\nexport const useDeepEqualMemo: UseDeepEqualMemo = (factory, dependencyArray) => {\n  return React.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\nexport const isDeeplyEqual = deepEqual;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}