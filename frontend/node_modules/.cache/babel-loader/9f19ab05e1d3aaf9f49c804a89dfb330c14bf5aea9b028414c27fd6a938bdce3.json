{"ast":null,"code":"// src/isomorphicAtob.ts\nvar isomorphicAtob = data => {\n  if (typeof atob !== \"undefined\" && typeof atob === \"function\") {\n    return atob(data);\n  } else if (typeof global !== \"undefined\" && global.Buffer) {\n    return new global.Buffer(data, \"base64\").toString();\n  }\n  return data;\n};\nexport { isomorphicAtob };","map":{"version":3,"mappings":";AAIO,IAAMA,iBAAkBC,QAAiB;EAC9C,IAAI,OAAOC,SAAS,eAAe,OAAOA,SAAS,YAAY;IAC7D,OAAOA,KAAKD,IAAI;EAClB,WAAW,OAAOE,WAAW,eAAeA,OAAOC,QAAQ;IACzD,OAAO,IAAID,OAAOC,OAAOH,MAAM,QAAQ,EAAEI,UAAS;EACpD;EACA,OAAOJ;AACT","names":["isomorphicAtob","data","atob","global","Buffer","toString"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/isomorphicAtob.ts"],"sourcesContent":["/**\n * A function that decodes a string of data which has been encoded using base-64 encoding.\n * Uses `atob` if available, otherwise uses `Buffer` from `global`. If neither are available, returns the data as-is.\n */\nexport const isomorphicAtob = (data: string) => {\n  if (typeof atob !== 'undefined' && typeof atob === 'function') {\n    return atob(data);\n  } else if (typeof global !== 'undefined' && global.Buffer) {\n    return new global.Buffer(data, 'base64').toString();\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}