{"ast":null,"code":"// src/callWithRetry.ts\nfunction wait(ms) {\n  return new Promise(res => setTimeout(res, ms));\n}\nvar MAX_NUMBER_OF_RETRIES = 5;\nasync function callWithRetry(fn) {\n  let attempt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let maxAttempts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_NUMBER_OF_RETRIES;\n  try {\n    return await fn();\n  } catch (e) {\n    if (attempt >= maxAttempts) {\n      throw e;\n    }\n    await wait(2 ** attempt * 100);\n    return callWithRetry(fn, attempt + 1, maxAttempts);\n  }\n}\nexport { callWithRetry };","map":{"version":3,"mappings":";AAAA,SAASA,KAAKC,IAAY;EACxB,OAAO,IAAIC,QAAQC,OAAOC,WAAWD,KAAKF,EAAE,CAAC;AAC/C;AAEA,IAAMI,wBAAwB;AAQ9B,eAAsBC,cACpBC,IAGY;EAAA,IAFZC,8EAAU;EAAA,IACVC,kFAAcJ;EAEd,IAAI;IACF,OAAO,MAAME,IAAG;EAClB,SAASG,GAAG;IACV,IAAIF,WAAWC,aAAa;MAC1B,MAAMC;IACR;IACA,MAAMV,KAAK,KAAKQ,UAAU,GAAG;IAE7B,OAAOF,cAAcC,IAAIC,UAAU,GAAGC,WAAW;EACnD;AACF","names":["wait","ms","Promise","res","setTimeout","MAX_NUMBER_OF_RETRIES","callWithRetry","fn","attempt","maxAttempts","e"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/callWithRetry.ts"],"sourcesContent":["function wait(ms: number) {\n  return new Promise(res => setTimeout(res, ms));\n}\n\nconst MAX_NUMBER_OF_RETRIES = 5;\n\n/**\n * Retry callback function every few hundred ms (with an exponential backoff\n * based on the current attempt) until the maximum attempts has reached or\n * the callback is executed successfully. The default number of maximum\n * attempts is 5 and retries are triggered when callback throws an error.\n */\nexport async function callWithRetry<T>(\n  fn: (...args: unknown[]) => Promise<T>,\n  attempt = 1,\n  maxAttempts = MAX_NUMBER_OF_RETRIES,\n): Promise<T> {\n  try {\n    return await fn();\n  } catch (e) {\n    if (attempt >= maxAttempts) {\n      throw e;\n    }\n    await wait(2 ** attempt * 100);\n\n    return callWithRetry(fn, attempt + 1, maxAttempts);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}