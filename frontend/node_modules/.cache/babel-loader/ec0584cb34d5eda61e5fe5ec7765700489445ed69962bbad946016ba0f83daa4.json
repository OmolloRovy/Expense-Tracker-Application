{"ast":null,"code":"// src/color.ts\nvar IS_HEX_COLOR_REGEX = /^#?([A-F0-9]{6}|[A-F0-9]{3})$/i;\nvar IS_RGB_COLOR_REGEX = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/i;\nvar IS_RGBA_COLOR_REGEX = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*\\d+(\\.\\d+)?)\\)$/i;\nvar IS_HSL_COLOR_REGEX = /^hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)$/i;\nvar IS_HSLA_COLOR_REGEX = /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%(,\\s*\\d+(\\.\\d+)?)*\\)$/i;\nvar isValidHexString = s => {\n  return !!s.match(IS_HEX_COLOR_REGEX);\n};\nvar isValidRgbaString = s => {\n  return !!(s.match(IS_RGB_COLOR_REGEX) || s.match(IS_RGBA_COLOR_REGEX));\n};\nvar isValidHslaString = s => {\n  return !!s.match(IS_HSL_COLOR_REGEX) || !!s.match(IS_HSLA_COLOR_REGEX);\n};\nvar isRGBColor = c => {\n  return typeof c !== \"string\" && \"r\" in c;\n};\nvar isHSLColor = c => {\n  return typeof c !== \"string\" && \"h\" in c;\n};\nvar isTransparent = c => {\n  return c === \"transparent\";\n};\nvar hasAlpha = color => {\n  return typeof color !== \"string\" && color.a != void 0 && color.a < 1;\n};\nvar CLEAN_HSLA_REGEX = /[hsla()]/g;\nvar CLEAN_RGBA_REGEX = /[rgba()]/g;\nvar stringToHslaColor = value => {\n  if (value === \"transparent\") {\n    return {\n      h: 0,\n      s: 0,\n      l: 0,\n      a: 0\n    };\n  }\n  if (isValidHexString(value)) {\n    return hexStringToHslaColor(value);\n  }\n  if (isValidHslaString(value)) {\n    return parseHslaString(value);\n  }\n  if (isValidRgbaString(value)) {\n    return rgbaStringToHslaColor(value);\n  }\n  return null;\n};\nvar stringToSameTypeColor = value => {\n  value = value.trim();\n  if (isValidHexString(value)) {\n    return value.startsWith(\"#\") ? value : `#${value}`;\n  }\n  if (isValidRgbaString(value)) {\n    return parseRgbaString(value);\n  }\n  if (isValidHslaString(value)) {\n    return parseHslaString(value);\n  }\n  if (isTransparent(value)) {\n    return value;\n  }\n  return \"\";\n};\nvar colorToSameTypeString = color => {\n  if (typeof color === \"string\" && (isValidHexString(color) || isTransparent(color))) {\n    return color;\n  }\n  if (isRGBColor(color)) {\n    return rgbaColorToRgbaString(color);\n  }\n  if (isHSLColor(color)) {\n    return hslaColorToHslaString(color);\n  }\n  return \"\";\n};\nvar hexStringToRgbaColor = hex => {\n  hex = hex.replace(\"#\", \"\");\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  return {\n    r,\n    g,\n    b\n  };\n};\nvar rgbaColorToRgbaString = color => {\n  const {\n    a,\n    b,\n    g,\n    r\n  } = color;\n  return color.a === 0 ? \"transparent\" : color.a != void 0 ? `rgba(${r},${g},${b},${a})` : `rgb(${r},${g},${b})`;\n};\nvar hslaColorToHslaString = color => {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = color;\n  const sPerc = Math.round(s * 100);\n  const lPerc = Math.round(l * 100);\n  return color.a === 0 ? \"transparent\" : color.a != void 0 ? `hsla(${h},${sPerc}%,${lPerc}%,${a})` : `hsl(${h},${sPerc}%,${lPerc}%)`;\n};\nvar hexStringToHslaColor = hex => {\n  const rgbaString = colorToSameTypeString(hexStringToRgbaColor(hex));\n  return rgbaStringToHslaColor(rgbaString);\n};\nvar rgbaStringToHslaColor = rgba => {\n  const rgbaColor = parseRgbaString(rgba);\n  const r = rgbaColor.r / 255;\n  const g = rgbaColor.g / 255;\n  const b = rgbaColor.b / 255;\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  let h, s;\n  const l = (max + min) / 2;\n  if (max == min) {\n    h = s = 0;\n  } else {\n    const d = max - min;\n    s = l >= 0.5 ? d / (2 - (max + min)) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d * 60;\n        break;\n      case g:\n        h = ((b - r) / d + 2) * 60;\n        break;\n      default:\n        h = ((r - g) / d + 4) * 60;\n        break;\n    }\n  }\n  const res = {\n    h: Math.round(h),\n    s,\n    l\n  };\n  const a = rgbaColor.a;\n  if (a != void 0) {\n    res.a = a;\n  }\n  return res;\n};\nvar parseRgbaString = str => {\n  const [r, g, b, a] = str.replace(CLEAN_RGBA_REGEX, \"\").split(\",\").map(c => Number.parseFloat(c));\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n};\nvar parseHslaString = str => {\n  const [h, s, l, a] = str.replace(CLEAN_HSLA_REGEX, \"\").split(\",\").map(c => Number.parseFloat(c));\n  return {\n    h,\n    s: s / 100,\n    l: l / 100,\n    a\n  };\n};\nexport { isValidHexString, isValidRgbaString, isValidHslaString, isRGBColor, isHSLColor, isTransparent, hasAlpha, stringToHslaColor, stringToSameTypeColor, colorToSameTypeString, hexStringToRgbaColor };","map":{"version":3,"mappings":"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","names":["IS_HEX_COLOR_REGEX","IS_RGB_COLOR_REGEX","IS_RGBA_COLOR_REGEX","IS_HSL_COLOR_REGEX","IS_HSLA_COLOR_REGEX","isValidHexString","s","match","isValidRgbaString","isValidHslaString","isRGBColor","c","isHSLColor","isTransparent","hasAlpha","color","a","CLEAN_HSLA_REGEX","CLEAN_RGBA_REGEX","stringToHslaColor","value","h","l","hexStringToHslaColor","parseHslaString","rgbaStringToHslaColor","stringToSameTypeColor","trim","startsWith","parseRgbaString","colorToSameTypeString","rgbaColorToRgbaString","hslaColorToHslaString","hexStringToRgbaColor","hex","replace","r","parseInt","substring","g","b","sPerc","Math","round","lPerc","rgbaString","rgba","rgbaColor","max","min","d","res","str","split","map","Number","parseFloat"],"sources":["/home/vanistelrooy/Downloads/Expense-Tracker-Application-master/frontend/node_modules/@clerk/shared/src/color.ts"],"sourcesContent":["import type { Color, HslaColor, RgbaColor, TransparentColor } from '@clerk/types';\n\nconst IS_HEX_COLOR_REGEX = /^#?([A-F0-9]{6}|[A-F0-9]{3})$/i;\n\nconst IS_RGB_COLOR_REGEX = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/i;\nconst IS_RGBA_COLOR_REGEX = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*\\d+(\\.\\d+)?)\\)$/i;\n\nconst IS_HSL_COLOR_REGEX = /^hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)$/i;\nconst IS_HSLA_COLOR_REGEX = /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%(,\\s*\\d+(\\.\\d+)?)*\\)$/i;\n\nexport const isValidHexString = (s: string) => {\n  return !!s.match(IS_HEX_COLOR_REGEX);\n};\n\nexport const isValidRgbaString = (s: string) => {\n  return !!(s.match(IS_RGB_COLOR_REGEX) || s.match(IS_RGBA_COLOR_REGEX));\n};\n\nexport const isValidHslaString = (s: string) => {\n  return !!s.match(IS_HSL_COLOR_REGEX) || !!s.match(IS_HSLA_COLOR_REGEX);\n};\n\nexport const isRGBColor = (c: Color): c is RgbaColor => {\n  return typeof c !== 'string' && 'r' in c;\n};\n\nexport const isHSLColor = (c: Color): c is HslaColor => {\n  return typeof c !== 'string' && 'h' in c;\n};\n\nexport const isTransparent = (c: Color): c is TransparentColor => {\n  return c === 'transparent';\n};\n\nexport const hasAlpha = (color: Color): boolean => {\n  return typeof color !== 'string' && color.a != undefined && color.a < 1;\n};\n\nconst CLEAN_HSLA_REGEX = /[hsla()]/g;\nconst CLEAN_RGBA_REGEX = /[rgba()]/g;\n\nexport const stringToHslaColor = (value: string): HslaColor | null => {\n  if (value === 'transparent') {\n    return { h: 0, s: 0, l: 0, a: 0 };\n  }\n\n  if (isValidHexString(value)) {\n    return hexStringToHslaColor(value);\n  }\n\n  if (isValidHslaString(value)) {\n    return parseHslaString(value);\n  }\n\n  if (isValidRgbaString(value)) {\n    return rgbaStringToHslaColor(value);\n  }\n\n  return null;\n};\n\nexport const stringToSameTypeColor = (value: string): Color => {\n  value = value.trim();\n  if (isValidHexString(value)) {\n    return value.startsWith('#') ? value : `#${value}`;\n  }\n\n  if (isValidRgbaString(value)) {\n    return parseRgbaString(value);\n  }\n\n  if (isValidHslaString(value)) {\n    return parseHslaString(value);\n  }\n\n  if (isTransparent(value)) {\n    return value;\n  }\n  return '';\n};\n\nexport const colorToSameTypeString = (color: Color): string | TransparentColor => {\n  if (typeof color === 'string' && (isValidHexString(color) || isTransparent(color))) {\n    return color;\n  }\n\n  if (isRGBColor(color)) {\n    return rgbaColorToRgbaString(color);\n  }\n\n  if (isHSLColor(color)) {\n    return hslaColorToHslaString(color);\n  }\n\n  return '';\n};\n\nexport const hexStringToRgbaColor = (hex: string): RgbaColor => {\n  hex = hex.replace('#', '');\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  return { r, g, b };\n};\n\nconst rgbaColorToRgbaString = (color: RgbaColor): string => {\n  const { a, b, g, r } = color;\n  return color.a === 0 ? 'transparent' : color.a != undefined ? `rgba(${r},${g},${b},${a})` : `rgb(${r},${g},${b})`;\n};\n\nconst hslaColorToHslaString = (color: HslaColor): string => {\n  const { h, s, l, a } = color;\n  const sPerc = Math.round(s * 100);\n  const lPerc = Math.round(l * 100);\n  return color.a === 0\n    ? 'transparent'\n    : color.a != undefined\n    ? `hsla(${h},${sPerc}%,${lPerc}%,${a})`\n    : `hsl(${h},${sPerc}%,${lPerc}%)`;\n};\n\nconst hexStringToHslaColor = (hex: string): HslaColor => {\n  const rgbaString = colorToSameTypeString(hexStringToRgbaColor(hex));\n  return rgbaStringToHslaColor(rgbaString);\n};\n\nconst rgbaStringToHslaColor = (rgba: string): HslaColor => {\n  const rgbaColor = parseRgbaString(rgba);\n  const r = rgbaColor.r / 255;\n  const g = rgbaColor.g / 255;\n  const b = rgbaColor.b / 255;\n\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  let h, s;\n  const l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0;\n  } else {\n    const d = max - min;\n    s = l >= 0.5 ? d / (2 - (max + min)) : d / (max + min);\n    switch (max) {\n      case r:\n        h = ((g - b) / d) * 60;\n        break;\n      case g:\n        h = ((b - r) / d + 2) * 60;\n        break;\n      default:\n        h = ((r - g) / d + 4) * 60;\n        break;\n    }\n  }\n\n  const res: HslaColor = { h: Math.round(h), s, l };\n  const a = rgbaColor.a;\n  if (a != undefined) {\n    res.a = a;\n  }\n  return res;\n};\n\nconst parseRgbaString = (str: string): RgbaColor => {\n  const [r, g, b, a] = str\n    .replace(CLEAN_RGBA_REGEX, '')\n    .split(',')\n    .map(c => Number.parseFloat(c));\n  return { r, g, b, a };\n};\n\nconst parseHslaString = (str: string): HslaColor => {\n  const [h, s, l, a] = str\n    .replace(CLEAN_HSLA_REGEX, '')\n    .split(',')\n    .map(c => Number.parseFloat(c));\n  return { h, s: s / 100, l: l / 100, a };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}